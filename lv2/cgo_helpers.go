// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Thu, 05 Sep 2019 15:48:59 EDT.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package lv2

/*
#cgo pkg-config: lv2
#include <lv2/lv2plug.in/ns/lv2core/lv2.h>
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"sync"
	"unsafe"
)

// cgoAllocMap stores pointers to C allocated memory for future reference.
type cgoAllocMap struct {
	mux sync.RWMutex
	m   map[unsafe.Pointer]struct{}
}

var cgoAllocsUnknown = new(cgoAllocMap)

func (a *cgoAllocMap) Add(ptr unsafe.Pointer) {
	a.mux.Lock()
	if a.m == nil {
		a.m = make(map[unsafe.Pointer]struct{})
	}
	a.m[ptr] = struct{}{}
	a.mux.Unlock()
}

func (a *cgoAllocMap) IsEmpty() bool {
	a.mux.RLock()
	isEmpty := len(a.m) == 0
	a.mux.RUnlock()
	return isEmpty
}

func (a *cgoAllocMap) Borrow(b *cgoAllocMap) {
	if b == nil || b.IsEmpty() {
		return
	}
	b.mux.Lock()
	a.mux.Lock()
	for ptr := range b.m {
		if a.m == nil {
			a.m = make(map[unsafe.Pointer]struct{})
		}
		a.m[ptr] = struct{}{}
		delete(b.m, ptr)
	}
	a.mux.Unlock()
	b.mux.Unlock()
}

func (a *cgoAllocMap) Free() {
	a.mux.Lock()
	for ptr := range a.m {
		C.free(ptr)
		delete(a.m, ptr)
	}
	a.mux.Unlock()
}

// allocFeatureMemory allocates memory for type C.LV2_Feature in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFeatureMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFeatureValue))
	if err != nil {
		panic("memory alloc error: " + err.Error())
	}
	return mem
}

const sizeOfFeatureValue = unsafe.Sizeof([1]C.LV2_Feature{})

// unpackPCharString represents the data from Go string as *C.char and avoids copying.
func unpackPCharString(str string) (*C.char, *cgoAllocMap) {
	h := (*stringHeader)(unsafe.Pointer(&str))
	return (*C.char)(h.Data), cgoAllocsUnknown
}

type stringHeader struct {
	Data unsafe.Pointer
	Len  int
}

// packPCharString creates a Go string backed by *C.char and avoids copying.
func packPCharString(p *C.char) (raw string) {
	if p != nil && *p != 0 {
		h := (*stringHeader)(unsafe.Pointer(&raw))
		h.Data = unsafe.Pointer(p)
		for *p != 0 {
			p = (*C.char)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 1)) // p++
		}
		h.Len = int(uintptr(unsafe.Pointer(p)) - uintptr(h.Data))
	}
	return
}

// RawString reperesents a string backed by data on the C side.
type RawString string

// Copy returns a Go-managed copy of raw string.
func (raw RawString) Copy() string {
	if len(raw) == 0 {
		return ""
	}
	h := (*stringHeader)(unsafe.Pointer(&raw))
	return C.GoStringN((*C.char)(h.Data), C.int(h.Len))
}

// Ref returns the underlying reference to C object or nil if struct is nil.
func (x *Feature) Ref() *C.LV2_Feature {
	if x == nil {
		return nil
	}
	return x.refc2185671
}

// Free invokes alloc map's free mechanism that cleanups any allocated memory using C free.
// Does nothing if struct is nil or has no allocation map.
func (x *Feature) Free() {
	if x != nil && x.allocsc2185671 != nil {
		x.allocsc2185671.(*cgoAllocMap).Free()
		x.refc2185671 = nil
	}
}

// NewFeatureRef creates a new wrapper struct with underlying reference set to the original C object.
// Returns nil if the provided pointer to C object is nil too.
func NewFeatureRef(ref unsafe.Pointer) *Feature {
	if ref == nil {
		return nil
	}
	obj := new(Feature)
	obj.refc2185671 = (*C.LV2_Feature)(unsafe.Pointer(ref))
	return obj
}

// PassRef returns the underlying C object, otherwise it will allocate one and set its values
// from this wrapping struct, counting allocations into an allocation map.
func (x *Feature) PassRef() (*C.LV2_Feature, *cgoAllocMap) {
	if x == nil {
		return nil, nil
	} else if x.refc2185671 != nil {
		return x.refc2185671, nil
	}
	memc2185671 := allocFeatureMemory(1)
	refc2185671 := (*C.LV2_Feature)(memc2185671)
	allocsc2185671 := new(cgoAllocMap)
	allocsc2185671.Add(memc2185671)

	var cURI_allocs *cgoAllocMap
	refc2185671.URI, cURI_allocs = unpackPCharString(x.URI)
	allocsc2185671.Borrow(cURI_allocs)

	var cdata_allocs *cgoAllocMap
	refc2185671.data, cdata_allocs = *(*unsafe.Pointer)(unsafe.Pointer(&x.Data)), cgoAllocsUnknown
	allocsc2185671.Borrow(cdata_allocs)

	x.refc2185671 = refc2185671
	x.allocsc2185671 = allocsc2185671
	return refc2185671, allocsc2185671

}

// PassValue does the same as PassRef except that it will try to dereference the returned pointer.
func (x Feature) PassValue() (C.LV2_Feature, *cgoAllocMap) {
	if x.refc2185671 != nil {
		return *x.refc2185671, nil
	}
	ref, allocs := x.PassRef()
	return *ref, allocs
}

// Deref uses the underlying reference to C object and fills the wrapping struct with values.
// Do not forget to call this method whether you get a struct for C object and want to read its values.
func (x *Feature) Deref() {
	if x.refc2185671 == nil {
		return
	}
	x.URI = packPCharString(x.refc2185671.URI)
	x.Data = (unsafe.Pointer)(unsafe.Pointer(x.refc2185671.data))
}
